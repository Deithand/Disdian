import * as DiscordRPC from 'discord-rpc';
import { DiscordPresence } from '../shared/types';

export class DiscordRPCManager {
  private client: DiscordRPC.Client | null = null;
  private isConnected = false;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private clientId: string;

  constructor(clientId?: string) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    this.clientId = clientId || '1234567890000';
  }

  async connect() {
    if (this.isConnected) return;

    if (!this.clientId || this.clientId.trim() === '') {
      console.warn('‚ö†Ô∏è  Discord Client ID not set');
      return;
    }

    try {
      this.client = new DiscordRPC.Client({ transport: 'ipc' });

      this.client.on('ready', () => {
        console.log('‚úÖ Discord RPC Connected successfully!');
        this.isConnected = true;
        this.setDefaultPresence();
      });

      this.client.on('disconnected', () => {
        console.log('‚ö†Ô∏è  Discord RPC Disconnected');
        this.isConnected = false;
        this.scheduleReconnect();
      });

      console.log(`üîó Connecting to Discord with Client ID: ${this.clientId}`);
      await this.client.login({ clientId: this.clientId });
    } catch (error) {
      console.error('‚ùå Failed to connect to Discord RPC:', error);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
      console.log('   1. Discord –∑–∞–ø—É—â–µ–Ω');
      console.log('   2. Client ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
      console.log('   3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ https://discord.com/developers/applications');
      // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    }
  }

  disconnect() {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    if (this.client) {
      this.client.destroy();
      this.client = null;
      this.isConnected = false;
      console.log('üîå Discord RPC disconnected');
    }
  }

  private scheduleReconnect() {
    if (this.reconnectTimeout) return;

    this.reconnectTimeout = setTimeout(() => {
      this.reconnectTimeout = null;
      console.log('üîÑ Attempting to reconnect to Discord...');
      this.connect();
    }, 15000); // Retry after 15 seconds
  }

  private setDefaultPresence() {
    this.updatePresence({
      state: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–º–µ—Ç–∫–∏',
      details: '–í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é',
      startTimestamp: Date.now(),
      largeImageKey: 'disdian-logo',
      largeImageText: 'Disdian',
      smallImageKey: 'idle',
      smallImageText: 'Idle'
    });
  }

  updatePresence(presence: DiscordPresence) {
    if (!this.isConnected || !this.client) {
      console.log('‚ö†Ô∏è  Cannot update presence - Discord not connected');
      return;
    }

    try {
      this.client.setActivity({
        state: presence.state || '–†–∞–±–æ—Ç–∞—é —Å –∑–∞–º–µ—Ç–∫–∞–º–∏',
        details: presence.details || 'Disdian',
        startTimestamp: presence.startTimestamp || Date.now(),
        largeImageKey: presence.largeImageKey || 'disdian-logo',
        largeImageText: presence.largeImageText || 'Disdian Note Taking',
        smallImageKey: presence.smallImageKey || 'writing',
        smallImageText: presence.smallImageText || 'Writing',
        instance: false,
      });
      console.log('üìù Discord presence updated');
    } catch (error) {
      console.error('‚ùå Failed to update Discord presence:', error);
    }
  }

  updateNoteActivity(noteTitle: string, wordCount: number) {
    this.updatePresence({
      state: `–†–µ–¥–∞–∫—Ç–∏—Ä—É—é: ${noteTitle}`,
      details: `${wordCount} —Å–ª–æ–≤`,
      startTimestamp: Date.now(),
      largeImageKey: 'disdian-logo',
      largeImageText: 'Disdian',
      smallImageKey: 'writing',
      smallImageText: '–ü–∏—à—É –∑–∞–º–µ—Ç–∫—É'
    });
  }

  updateBrowsingActivity() {
    this.updatePresence({
      state: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –∑–∞–º–µ—Ç–∫–∏',
      details: '–û—Ä–≥–∞–Ω–∏–∑—É—é –ø—Ä–æ–µ–∫—Ç',
      startTimestamp: Date.now(),
      largeImageKey: 'disdian-logo',
      largeImageText: 'Disdian',
      smallImageKey: 'browsing',
      smallImageText: 'Browsing'
    });
  }
}
